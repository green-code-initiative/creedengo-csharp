# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Deployment

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}/nuget
  PackageName: "EcoCode"

on:
  workflow_run:
    workflows: ["Build and Test"]
    branches: [main]
    types: [completed]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # Only run if Build and Test was successful
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Necessary to fetch tags

    - name: Extract version number
      id: get_version
      run: |
        VERSION_TAG=$(git tag --points-at ${{ github.event.workflow_run.head_commit.id }} | grep '^v[0-9]*\.[0-9]*\.[0-9]*$')
        if [[ ! $VERSION_TAG ]]; then
          echo "No version tag found, deployment stopped."
          exit 1
        fi
        VERSION=${VERSION_TAG:1} # Strip the 'v' prefix
        echo "::set-output name=version::$VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Apply version number
      run: |
        sed -i "s|<Version>.*</Version>|<Version>${{ env.VERSION }}</Version>|g" Directory.Build.props
        sed -i "s|<AssemblyVersion>.*</AssemblyVersion>|<AssemblyVersion>${{ env.VERSION }}</AssemblyVersion>|g" Directory.Build.props
        sed -i "s|<FileVersion>.*</FileVersion>|<FileVersion>${{ env.VERSION }}</FileVersion>|g" Directory.Build.props
        sed -i "s|<AssemblyInformationalVersion>.*</AssemblyInformationalVersion>|<AssemblyInformationalVersion>${{ env.VERSION }}</AssemblyInformationalVersion>|g" Directory.Build.props

    - name: Set up .NET
      uses: actions/setup-dotnet@v4

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Pack
      run: dotnet pack --configuration Release --no-build --output ${{ env.NuGetDirectory }}

    - name: Publish NuGet package
      run: |
        $File = "${{ env.NuGetDirectory }}/${{ env.PackageName }}.${{ env.VERSION }}.nupkg"
        dotnet nuget push "$File" --api-key "${{ secrets.NUGET_API_KEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate

    - name: Unlist Package Version
      run: |
          $url = "https://www.nuget.org/api/v2/package/${{ env.PackageName }}/${{ env.VERSION }}"
          Invoke-RestMethod -Method Put -Uri $url -Headers @{ "X-NuGet-ApiKey" = "${{ secrets.NUGET_API_KEY }}" } -Body @{ listed = $false }
      shell: pwsh

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body: "Release of version ${{ steps.get_version.outputs.version }}"
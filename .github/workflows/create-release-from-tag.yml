# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Create release from tag

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  PackageName: "EcoCode"

on:    
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-beta[0-9]+'

permissions:
  actions: write
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Necessary to fetch tags

    - name: Versioning analysis
      id: versioning
      run: |
        FULL_VERSION=${GITHUB_REF#refs/tags/}
        echo "Full version tag: $FULL_VERSION"

        TAG_COMMIT=$(git rev-list -n 1 $FULL_VERSION)
        MAIN_BRANCH_COMMIT=$(git rev-parse origin/main)
        if ! git merge-base --is-ancestor $TAG_COMMIT $MAIN_BRANCH_COMMIT; then
          echo "Tag is not on main branch, stopping workflow."
          exit 1
        fi

        if [[ $FULL_VERSION =~ ^v([0-9]+\.[0-9]+\.[0-9]+)(-beta[0-9]+)?$ ]]; then
          echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          echo "pre_release=$( [[ -n ${BASH_REMATCH[2]} ]] && echo 'true' || echo 'false' )" >> $GITHUB_OUTPUT
          echo "full_version=$FULL_VERSION" >> $GITHUB_OUTPUT
        else
          echo "Error: Tag does not match the expected format 'vX.Y.Z' or 'vX.Y.Z-betaN'"
          exit 1
        fi

    - name: Set up .NET
      uses: actions/setup-dotnet@v4

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --configuration Release --no-restore --logger "trx;LogFileName=test_results.trx"

    - name: Create NuGet package
      run: dotnet pack --configuration Release --no-build --output ./nupkg /p:Version=${{ steps.versioning.outputs.version }}

    - name: Publish NuGet package # Use --skip-duplicate in case we need to overwrite an existing package version on nuget.org
      run: dotnet nuget push ./nupkg/*.nupkg -k "${{ secrets.NUGET_API_KEY }}" -s https://api.nuget.org/v3/index.json --skip-duplicate

    - name : Unlist beta NuGet package
      if: ${{ steps.versioning.outputs.pre_release }} == 'true'
      env:
        PACKAGE_VERSION: ${{ steps.versioning.outputs.version }}
        PACKAGE_NAME: ${{ env.PackageName }}
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: dotnet nuget delete $Env:PACKAGE_NAME $Env:PACKAGE_VERSION -k "${{ secrets.NUGET_API_KEY }}" --non-interactive

    - name: Create GitHub Release
      run: |
        curl \
          -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases" \
          -d '{
            "tag_name": "${{ steps.versioning.outputs.full_version }}",
            "target_commitish": "main",
            "name": "${{ steps.versioning.outputs.full_version }}",
            "body": "Release of version ${{ steps.versioning.outputs.full_version }}",
            "draft": false,
            "prerelease": ${{ steps.versioning.outputs.pre_release == 'true' }}
          }'